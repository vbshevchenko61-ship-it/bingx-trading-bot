import time
from datetime import datetime
from typing import Set, List, Dict
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, WebDriverException, NoSuchElementException
from chromedriver_py import binary_path
import telebot
import logging
import threading
import sys
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot_debug.log"),
        logging.StreamHandler()
    ]
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7881481886:AAF3YEZgJMZU6oRFhPSCrtpvVwKuBaTKaGg"
BINGX_URL = "https://bingx.com/ru-ru/CopyTrading/1399302708580769794?accountEnum=BINGX_SWAP_FUTURES&apiIdentity=1409770858837684224&from=4&list_id=all&rankStatisticDays=30"
CHECK_INTERVAL = 60
ADMIN_CHAT_ID = 5115771083
MAX_RETRIES = 3
HISTORY_TAB_SELECTOR = "#__nuxt > div > div > div.trader-home > div.trading-data-container > div.tab-bar > ul > li:nth-child(3) > div.mtb-base-p-item"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
bot = telebot.TeleBot(TOKEN, threaded=False)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
subscribers: Set[int] = set()
processed_trades = []  # –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞
processed_hashes = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ö–µ—à–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
shutdown_flag = False
driver_instance = None
driver_lock = threading.Lock()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        chat_id = message.chat.id
        if chat_id not in subscribers:
            subscribers.add(chat_id)
            bot.send_message(
                chat_id,
                "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏, –æ–∂–∏–¥–∞–π—Ç–µ.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/trades - –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫"
            )
            logging.info(f"–ß–∞—Ç {chat_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        else:
            bot.send_message(
                chat_id,
                "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/trades - –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫"
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã start: {str(e)}")

@bot.message_handler(commands=['trades'])
def show_recent_trades(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫"""
    try:
        chat_id = message.chat.id
        if not processed_trades:
            bot.send_message(chat_id, "üìä –°–¥–µ–ª–∫–∏ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ...")
            return
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
        recent_trades = processed_trades[-10:] if len(processed_trades) >= 10 else processed_trades
        
        if not recent_trades:
            bot.send_message(chat_id, "üìä –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        message_text = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\n\n"
        for i, trade_data in enumerate(recent_trades, 1):
            message_text += f"{i}. {trade_data['date']} | {trade_data['pair']} | –¢–∏–ø: {trade_data['close_type']} | –û–±—ä–µ–º: {trade_data['volume']} | –¶–µ–Ω–∞: {trade_data['price']} | –ü—Ä–∏–±—ã–ª—å: {trade_data['profit']}\n"
        
        bot.send_message(chat_id, message_text)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–¥–µ–ª–æ–∫: {str(e)}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–±—Ä–∞–Ω

def bot_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    while not shutdown_flag:
        try:
            bot.polling(none_stop=True, interval=1, timeout=20)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ polling: {str(e)}")
            time.sleep(5)
    logging.warning("–ü–æ—Ç–æ–∫ –±–æ—Ç–∞ Telegram –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def init_driver():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ ChromeDriver —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    global driver_instance
    
    if driver_instance:
        return driver_instance
        
    chrome_options = Options()
    
    # –†–µ–∂–∏–º –±–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    chrome_options.add_argument("--headless=new")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã  
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--window-size=1920,1080")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ Chromium
    chrome_options.binary_location = "/nix/store/qa9cnw4v5xkxyip6mb9kxqfq1z4x2dx1-chromium-138.0.7204.100/bin/chromium-browser"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
    chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36")
    chrome_options.add_argument('--ignore-certificate-errors')
    chrome_options.add_argument('--ignore-ssl-errors')
    chrome_options.add_argument('--disable-blink-features=AutomationControlled')
    chrome_options.add_argument('--allow-running-insecure-content')
    chrome_options.add_argument('--disable-web-security')
    chrome_options.add_experimental_option('excludeSwitches', ['enable-automation'])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--proxy-server='direct://'")
    chrome_options.add_argument("--proxy-bypass-list=*")
    chrome_options.add_argument("--disable-application-cache")
    chrome_options.add_argument("--disable-infobars")
    chrome_options.add_argument("--disable-notifications")
    chrome_options.add_argument("--disable-logging")
    chrome_options.add_argument("--log-level=3")
    
    try:
        service = Service(
            executable_path="/nix/store/8zj50jw4w0hby47167kqqsaqw4mm5bkd-chromedriver-unwrapped-138.0.7204.100/bin/chromedriver",
            service_args=['--verbose', '--log-path=chromedriver.log']
        )
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        driver.set_page_load_timeout(90)
        driver.set_script_timeout(30)
        
        driver_instance = driver
        logging.info("–î—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return driver
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {str(e)}")
        return None

def close_driver():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞"""
    global driver_instance
    if driver_instance:
        try:
            driver_instance.quit()
            logging.info("–î—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {str(e)}")
        finally:
            driver_instance = None

def get_trades_data() -> List[Dict[str, str]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WebDriver"""
    for attempt in range(MAX_RETRIES):
        if shutdown_flag:
            return []
            
        with driver_lock:
            driver = init_driver()
            if not driver:
                logging.error("–î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
                
            try:
                logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{MAX_RETRIES}: –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                driver.get(BINGX_URL)
                
                # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                WebDriverWait(driver, 45).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "div.tab-bar"))
                )
                logging.info("–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"
                history_tab = WebDriverWait(driver, 30).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, HISTORY_TAB_SELECTOR))
                )
                history_tab.click()
                logging.info("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫'")
                
                # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                WebDriverWait(driver, 30).until(
                    EC.visibility_of_element_located((By.CSS_SELECTOR, "div.table-wrap"))
                )
                logging.info("–¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                
                # –î–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                time.sleep(3)
                
                return parse_trade_history(driver)
            except (TimeoutException, WebDriverException, NoSuchElementException) as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {str(e)}")
                if attempt < MAX_RETRIES - 1:
                    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    close_driver()
                    retry_delay = 15 * (attempt + 1)
                    logging.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(retry_delay)
                    continue
                else:
                    return []
            except Exception as e:
                logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ get_trades_data: {str(e)}")
                return []
            finally:
                # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é
                pass
    
    return []

def parse_trade_history(driver) -> List[Dict[str, str]]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
    trades = []
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table = WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "div.table-wrap table"))
        )
        rows = table.find_elements(By.CSS_SELECTOR, "tbody tr")
        
        for row in rows:
            try:
                cells = row.find_elements(By.TAG_NAME, "td")
                if len(cells) < 7:
                    continue
                
                # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                clean_text = lambda text: " ".join(text.strip().split())
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                date_text = clean_text(cells[0].text)
                # –£–±–∏—Ä–∞–µ–º AM/PM –∏–∑ –≤—Ä–µ–º–µ–Ω–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                date_text = date_text.replace(" AM", "").replace(" PM", "")
                
                trade_data = {
                    "date": date_text,                         # –î–∞—Ç–∞
                    "pair": clean_text(cells[1].text),         # –ü–∞—Ä–∞
                    "close_type": clean_text(cells[2].text),   # –¢–∏–ø –∑–∞–∫—Ä—ã—Ç–∏—è
                    "volume": clean_text(cells[3].text),       # –û–±—ä–µ–º
                    "price": clean_text(cells[4].text),        # –¶–µ–Ω–∞
                    "profit": clean_text(cells[5].text),       # –ü—Ä–∏–±—ã–ª—å
                }
                
                trade_hash = f"{trade_data['pair']}_{trade_data['price']}_{trade_data['date']}"
                
                if trade_hash not in processed_hashes:
                    trades.append(trade_data)
                    processed_trades.append(trade_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                    processed_hashes.add(trade_hash)
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ –¥–æ 100 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫
                    if len(processed_trades) > 100:
                        removed_trade = processed_trades.pop(0)
                        removed_hash = f"{removed_trade['pair']}_{removed_trade['price']}_{removed_trade['date']}"
                        processed_hashes.discard(removed_hash)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {str(e)}")
                continue
                
        return trades
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
        return []

def format_trade_message(trade: Dict[str, str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É"""
    return (
        f"{trade['date']} | "
        f"{trade['pair']} | "
        f"–¢–∏–ø: {trade['close_type']} | "
        f"–û–±—ä–µ–º: {trade['volume']} | "
        f"–¶–µ–Ω–∞: {trade['price']} | "
        f"–ü—Ä–∏–±—ã–ª—å: {trade['profit']}"
    )

def send_trade_message(chat_id: int, trade: Dict[str, str]):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ"""
    try:
        message = format_trade_message(trade)
        bot.send_message(chat_id, message)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        return True
    except Exception as e:
        if "bot was blocked" in str(e):
            logging.error(f"–ß–∞—Ç {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –£–¥–∞–ª—è—é –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
            subscribers.discard(chat_id)
        elif "Too Many Requests" in str(e):
            logging.warning(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —á–∞—Ç {chat_id}")
            time.sleep(5)
        return False

def check_new_trades():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫"""
    if shutdown_flag:
        return
        
    start_time = time.time()
    try:
        new_trades = get_trades_data()
        
        if new_trades:
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫: {len(new_trades)}")
            if subscribers:
                for trade in new_trades:
                    if shutdown_flag:
                        return
                    for chat_id in list(subscribers):
                        send_trade_message(chat_id, trade)
                        time.sleep(1)
            else:
                logging.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        else:
            logging.info("–ù–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–¥–µ–ª–æ–∫: {str(e)}")
    finally:
        duration = time.time() - start_time
        logging.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫")

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    global shutdown_flag
    
    logging.info("=" * 60)
    logging.info(f"–ë–û–¢ –ó–ê–ü–£–©–ï–ù | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logging.info("=" * 60)
    logging.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
    logging.info(f"–°–µ–ª–µ–∫—Ç–æ—Ä –≤–∫–ª–∞–¥–∫–∏: {HISTORY_TAB_SELECTOR}")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–ø—É—Å–∫–µ
    try:
        bot.send_message(
            ADMIN_CHAT_ID,
            "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /start"
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {str(e)}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=bot_polling, daemon=True)
    bot_thread.start()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–¥–µ–ª–æ–∫
    while not shutdown_flag:
        try:
            check_new_trades()
            
            # –ü–∞—É–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            for _ in range(CHECK_INTERVAL):
                if shutdown_flag:
                    break
                time.sleep(1)
                
        except KeyboardInterrupt:
            logging.info("–†–∞–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            shutdown_flag = True
            break
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
            time.sleep(30)
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    close_driver()
    logging.warning("=" * 60)
    logging.warning("–ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ –ë–û–¢–ê")
    logging.warning("=" * 60)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try:
        bot.send_message(
            ADMIN_CHAT_ID,
            "üõë –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞!\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –≤—Ä—É—á–Ω—É—é."
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {str(e)}")
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    time.sleep(3)
    sys.exit(0)

if __name__ == "__main__":
    main()